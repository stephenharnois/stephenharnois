<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Stephen Harnois]]></title>
  <link href="http://stephenharnois.github.io/stephenharnois/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://stephenharnois.github.io/stephenharnois/"/>
  <updated>2013-06-04T15:49:33-04:00</updated>
  <id>http://stephenharnois.github.io/stephenharnois/</id>
  <author>
    <name><![CDATA[Stephen Harnois]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Tutorial: Chapter 3 and 4]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/04/ruby-on-rails-tutorial-chapter-3-and-4/"/>
    <updated>2013-06-04T15:29:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/04/ruby-on-rails-tutorial-chapter-3-and-4</id>
    <content type="html"><![CDATA[<p>Chapters 3 and 4 were about the creation of static pages and ruby data structures used in rails.
This section was a good introduction to static pages in rails and a good refresher of ruby.</p>

<!-- more -->


<h2>Static Pages and Test-Driven Development</h2>

<p>The new idea that I learned from this chapter was to right test first and then code the solution.
This chapter sets up RSpec and introduces the Red, Green, Re-factor procedure.
Red is when you first write a failing test. Green is once you implement a solution.
Re-factoring is going back over the solution and seeing if there is a better solution to the problem.
The good thing is since there is a automated test setup you can see if your change breaks anything else.
At the end of this chapter the advanced setup added Guard and Spork to RSpec which is used to automatically rerun your tests when your files change.</p>

<h2>Rails Flavored Ruby</h2>

<p>This chapter was more of a refresher since I had all of the previous training in Ruby.
There was also some information about how Rails includes CSS in the projects.
The exercises at the end of the chapter also suggests looking at the <a href="http://rubykoans.com/">Ruby Koans</a>, which I will move on to once I am done with this tutorial.</p>

<p>Thats it for today, the chapters get harder from here on so I will cover chapter 5 tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Tutorial: Chapters 1 and 2]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/03/rails-tutorial-chapters-1-and-2/"/>
    <updated>2013-06-03T12:30:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/03/rails-tutorial-chapters-1-and-2</id>
    <content type="html"><![CDATA[<p>A week ago I started the <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">Ruby on Rails Tutorial Book</a>.
I found the information in the first two chapters very helpful to get a general idea  of Ruby on Rails.
Before I get to that I should start by describing my exposure to Ruby before this tutorial.</p>

<!-- more -->


<h2>Ruby</h2>

<p>I started learning Ruby using the <a href="http://www.codecademy.com/tracks/ruby">Codecademy&rsquo;s</a> Ruby track.
The ten chapters covered everything from a basic introduction through more advanced Object-Oriented Programming concepts.
Some of the Challenges where challenging but working through them helped me to better understand Ruby.</p>

<h2>Rails</h2>

<p>Once I had a grasp of the Ruby language I moved on to the <a href="http://www.codeschool.com/courses/rails-for-zombies-redux">Rails for Zombies Course</a> at the Code School.
That course gave a general overview of the components that are part of a Rails project.</p>

<h2>Ruby on Rails Tutorial Book</h2>

<p>After understanding the basics of a Rails app.
I decided to move on to the Ruby on Rails Tutorial Book.
I found the first couple of chapters a great refresher of the previous courses I had taken.
With the addition of showing how to put the project under version control using Git and showing you how to push a demo app to Heroku.
These chapters where very beneficial in helping me cement the Ruby on Rails app building process.</p>

<p>That is all for today I will cover Chapter 3 tomorrow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[And so it begins..]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/02/and-so-it-begins-dot/"/>
    <updated>2013-06-02T11:33:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/02/and-so-it-begins-dot</id>
    <content type="html"><![CDATA[<p>Welcome, this blog is going to be a record of the training course I have taken.
I am mainly doing this for myself so I can have a list of all the trainings I have taken.
If you are new to web development I hope these posts help point you toward additional training options out there.</p>

<!-- more -->


<h2>Octopress</h2>

<p>The first thing I had to do was to get my own site updated and start this blog.
I chose to use Octopress because it incorporates well into my work flow.
I like developing using Ruby on Rails with Git as my version control solution.
This works well with Octopress because it is built with rails and uses Git for its own version control.
I used several tutorials to get up to speed, the first was <a href="http://hub.tutsplus.com/tutorials/getting-started-with-octopress--webdesign-11442">Getting Started With Octopress</a>
by Jonathan Cutrell on Tuts+.
The second source was the <a href="http://octopress.org/docs">Octopress Documentation</a> itself which where very helpful.</p>

<p>The only problem I had was trying to get the sidebar to not show up on the index page.
The solution I used was to pass the page the sidebar parameter in YAML section of the page.</p>

<pre><code>---
layout: page
title: "index"
comments: false
sharing: true
footer: true
sidebar: false
---
</code></pre>

<p>That is all for today, be back tommorow with another update.</p>
]]></content>
  </entry>
  
</feed>
