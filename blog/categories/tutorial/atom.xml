<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Stephen Harnois]]></title>
  <link href="http://stephenharnois.github.io/stephenharnois/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://stephenharnois.github.io/stephenharnois/"/>
  <updated>2013-06-25T10:04:26-04:00</updated>
  <id>http://stephenharnois.github.io/stephenharnois/</id>
  <author>
    <name><![CDATA[Stephen Harnois]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jumpstart Lab Tutorial]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/24/jumpstart-lab-tutorials/"/>
    <updated>2013-06-24T13:27:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/24/jumpstart-lab-tutorials</id>
    <content type="html"><![CDATA[<p>Today I found a very interesting and fun tutorial series on <a href="http://tutorials.jumpstartlab.com/">Jumpstart Lab</a>.
These tutorials focus mainly on Ruby and Rails, but there is also some Javascript tutorials.
I completed several of the tutorials so far and I think they are structured very well.
The projects are designed more like a project would be given from a customer.
Where you are just given an over all idea of what the client wants and you have to find a solution.
The tutorial then walks you through the process of coming up with a solution.
However they do not give you ever single step they point you towards a solution and allow you to discover the solution on your own.
Then after a rough solution is found they refactor the solution to take advantage of the power of Ruby.
This series is fun and I look forward to completing more of the sections.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codecademy Web Fundamentals]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/23/codecademy-web-fundamentals/"/>
    <updated>2013-06-23T12:48:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/23/codecademy-web-fundamentals</id>
    <content type="html"><![CDATA[<p>Today I did some more fundamental HTML and CSS training. I found a good series on <a href="http://www.codecademy.com/tracks/web">Codecademy.com</a>
The series covers the fundamentals of web design. This training was a good refresher and helped me learn some of the new HTML 5 methods for entering HTML.
I found the projects fun and interesting and I look forward to the next set of tutorials about Javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/22/twitter-bootstrap/"/>
    <updated>2013-06-22T09:48:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/22/twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>I thought I would take a quick break from all of the Ruby tutorials and learn a CSS framework.
Twitter has created a framework called Bootstrap that can be used to create page layouts by defining divs with predefined classes.
I found a tutorial on <a href="http://webdesign.tutsplus.com/series/twitter-bootstrap-101/">Web Design</a> section of Tuts +.
This tutorial was short but very informative.
The main thing I took away was that I need more customization and control over the CSS than is allowed by Bootstrap.
I can see the uses of this framework, but I think it can not replace hand coding CSS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Koans]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/20/ruby-koans/"/>
    <updated>2013-06-20T18:09:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/20/ruby-koans</id>
    <content type="html"><![CDATA[<p>The <a href="http://rubykoans.com/">Ruby Koans</a> tutorial is different from most tutorial because you use the language you are learning to run the tutorial.
Most of the challenges were review from previous Ruby tutorials I have taken.
There were several projects included in the Ruby Koans that were very difficult.
The are a lot of good descriptions of the projects on Stack Overflow if you get stuck.
Overall this was a very good tutorial and I learned a lot.</p>

<p>Up next is more classes from <a href="http://www.codeschool.com/paths/ruby">Code School</a>.
See you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Tutorial: Chapter 11]]></title>
    <link href="http://stephenharnois.github.io/stephenharnois/blog/2013/06/12/ruby-on-rails-tutorial-chapter-11/"/>
    <updated>2013-06-12T15:13:00-04:00</updated>
    <id>http://stephenharnois.github.io/stephenharnois/blog/2013/06/12/ruby-on-rails-tutorial-chapter-11</id>
    <content type="html"><![CDATA[<p>The final chapter of the tutorial is all about adding the ability to follow users.
The sections of the chapter are setting up the relationship model, creating a web interface for following users and setting up the status feed.</p>

<!-- more -->


<h2>Relationship Model</h2>

<p>To setup the relationship between followers and the people they follow Rails has an interesting solution:</p>

<pre><code>has_many :followed_users, through: :relationships, source: :followed
</code></pre>

<p>This code sets up a relationship between users through the relationship table.
The user model then needs functions to determine if you are following a user and a function to setup a following relationship.
There also needs to be a way to destroy the relationship between users.
Since this relationship has been setup the reverse relationship can be collected from the table very easily.</p>

<h2>Web Interface</h2>

<p>On the user profile there will be a number representing the people you are following and the people who follow you.
The first step is to add the following and followers routes to the routes file.
Then get the user and check the relationship table to find the followed and followers counts.
Next a button is added to each users feed to let you know if you are following that user.
If you are following them the button will say unfollow and if not following them then the button says follow.
The final piece is to add the gravatar images for each of the people you are following below the number of followers.</p>

<h2>Status Feed</h2>

<p>The status feed needs to contain the list of all of your posts combined with the post of the people you are following.
The following is a blend of Rails, Ruby and SQL that will get the list of microposts to include in the status feed:</p>

<pre><code>followed_user_ids = "SELECT followed_id FROM relationships
                     WHERE follower_id = :user_id"
where("user_id IN (#{followed_user_ids}) OR user_id = :user_id", user_id: user.id)
</code></pre>

<p>That finishes up the status feed section of the app.
This tutorial had time when it was difficult, but if you stick with it and read over the sections a few times I found that it clicked.</p>

<p>That is it for this tutorial next I will be moving on to the <a href="http://rubykoans.com/">Ruby Koans</a> tutorial.
Ruby Koans uses ruby itself to teach the language.</p>
]]></content>
  </entry>
  
</feed>
